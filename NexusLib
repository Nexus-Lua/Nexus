function window:MakeTab(config)
    local tabName = config.Name or "Tab"
    local tabButton = InsertTheme(Create("TextButton", tabScroll, {
        Size = UDim2.new(0, 0, 0, 28),
        Text = tabName,
        Font = Enum.Font.GothamSemibold,
        TextSize = 13,
        BackgroundColor3 = Theme["Color Secondary"],
        BackgroundTransparency = 1,
        TextTransparency = 1,
        BorderSizePixel = 0
    }), "Frame")
    Create("UICorner", tabButton, {CornerRadius = UDim.new(0, 8)})
    local stroke = Create("UIStroke", tabButton, {Color = Theme["Color Stroke"], Thickness = 1})
    local selector = InsertTheme(Create("Frame", tabButton, {
        Size = UDim2.new(0, 3, 0, 0),
        Position = UDim2.new(0, -3, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Theme["Color Accent"]
    }), "Accent")
    Create("UICorner", selector, {CornerRadius = UDim.new(0, 3)})
    print("Creating tab button for: " .. tabName)
    Tween(tabButton, "Size", UDim2.new(0, 120, 0, 28), 0.4, Enum.EasingStyle.Back)
    Tween(tabButton, "BackgroundTransparency", 0.6, 0.4, Enum.EasingStyle.Sine)
    Tween(tabButton, "TextTransparency", 0, 0.4, Enum.EasingStyle.Sine)

    local tabContainer = Create("ScrollingFrame", container, {
        Size = UDim2.new(1, 0, 0, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Theme["Color Accent"],
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        Visible = false,
        ScrollBarImageTransparency = 1
    })
    print("Creating tab container for: " .. tabName)
    Create("UIListLayout", tabContainer, {Padding = UDim.new(0, 8)})
    Create("UIPadding", tabContainer, {PaddingTop = UDim.new(0, 10), PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10)})

    tabButton.MouseButton1Click:Connect(function()
        print("Clicking tab: " .. tabName)
        for _, tab in pairs(NexusLib.Tabs) do
            Tween(tab.Container, "Size", UDim2.new(1, 0, 0, 0), 0.3, Enum.EasingStyle.Quad)
            tab.Container.Visible = false
            Tween(tab.Button, "BackgroundTransparency", 0.6, 0.2)
            Tween(tab.Button.Selector, "Size", UDim2.new(0, 3, 0, 0), 0.2, Enum.EasingStyle.Quad)
        end
        tabContainer.Visible = true
        Tween(tabContainer, "Size", UDim2.new(1, 0, 1, 0), 0.3, Enum.EasingStyle.Back)
        Tween(tabButton, "BackgroundTransparency", 0.3, 0.2)
        Tween(selector, "Size", UDim2.new(0, 3, 0, 20), 0.2, Enum.EasingStyle.Quad)
        Tween(tabContainer, "ScrollBarImageTransparency", 0.3, 0.3, Enum.EasingStyle.Sine)
    end)

    tabButton.MouseEnter:Connect(function()
        Tween(tabButton, "BackgroundTransparency", 0.4, 0.2)
        Tween(stroke, "Thickness", 1.5, 0.2)
    end)
    tabButton.MouseLeave:Connect(function()
        if not tabContainer.Visible then
            Tween(tabButton, "BackgroundTransparency", 0.6, 0.2)
        end
        Tween(stroke, "Thickness", 1, 0.2)
    end)

    if #NexusLib.Tabs == 0 then
        print("First tab activated: " .. tabName)
        tabContainer.Visible = true
        Tween(tabContainer, "Size", UDim2.new(1, 0, 1, 0), 0.5, Enum.EasingStyle.Back)
        tabButton.BackgroundTransparency = 0.3
        Tween(selector, "Size", UDim2.new(0, 3, 0, 20), 0.2, Enum.EasingStyle.Quad)
        Tween(tabContainer, "ScrollBarImageTransparency", 0.3, 0.5, Enum.EasingStyle.Sine)
    end
    tabButton.Selector = selector

    local tab = {Button = tabButton, Container = tabContainer}
    table.insert(NexusLib.Tabs, tab)
    print("Tab " .. tabName .. " created and added to NexusLib.Tabs")

    -- Tab Elements
    function tab:AddButton(config)
        local title = config.Name or "Button"
        local callback = config.Callback or function() end

        local button = InsertTheme(Create("TextButton", tabContainer, {
            Size = UDim2.new(0, 0, 0, 40),
            Text = title,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            BackgroundColor3 = Theme["Color Secondary"],
            BackgroundTransparency = 1,
            TextTransparency = 1,
            BorderSizePixel = 0
        }), "Frame")
        Create("UICorner", button, {CornerRadius = UDim.new(0, 10)})
        local stroke = Create("UIStroke", button, {Color = Theme["Color Stroke"], Thickness = 1})
        print("Adding button: " .. title .. " to tab " .. tabName)
        Tween(button, "Size", UDim2.new(1, 0, 0, 40), 0.4, Enum.EasingStyle.Back)
        Tween(button, "BackgroundTransparency", 0.2, 0.4, Enum.EasingStyle.Sine)
        Tween(button, "TextTransparency", 0, 0.4, Enum.EasingStyle.Sine)

        button.MouseButton1Click:Connect(function()
            callback()
            Tween(button, "Size", UDim2.new(1, 2, 0, 42), 0.1, Enum.EasingStyle.Quad)
            Tween(button, "Size", UDim2.new(1, 0, 0, 40), 0.1, Enum.EasingStyle.Quad)
            Tween(stroke, "Color", Theme["Color Accent"], 0.1)
            Tween(stroke, "Color", Theme["Color Stroke"], 0.1)
        end)
        button.MouseEnter:Connect(function()
            Tween(button, "BackgroundTransparency", 0, 0.2)
            Tween(stroke, "Thickness", 1.5, 0.2)
            Tween(button, "TextColor3", Theme["Color Accent"], 0.2)
        end)
        button.MouseLeave:Connect(function()
            Tween(button, "BackgroundTransparency", 0.2, 0.2)
            Tween(stroke, "Thickness", 1, 0.2)
            Tween(button, "TextColor3", Theme["Color Text"], 0.2)
        end)

        return {Set = function(newTitle)
            Tween(button, "TextTransparency", 1, 0.2)
            button.Text = newTitle
            Tween(button, "TextTransparency", 0, 0.2)
        end}
    end

    function tab:AddToggle(config)
        local title = config.Name or "Toggle"
        local default = config.Default or false
        local flag = config.Flag
        local callback = config.Callback or function() end
        if flag and GetFlag(flag) ~= nil then default = GetFlag(flag) end

        local frame = Create("Frame", tabContainer, {
            Size = UDim2.new(0, 0, 0, 40),
            BackgroundTransparency = 1
        })
        print("Adding toggle: " .. title .. " to tab " .. tabName)
        Tween(frame, "Size", UDim2.new(1, 0, 0, 40), 0.4, Enum.EasingStyle.Back)

        local label = InsertTheme(Create("TextLabel", frame, {
            Size = UDim2.new(1, -50, 1, 0),
            Text = title,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            BackgroundTransparency = 1,
            TextTransparency = 1
        }), "Text")
        Tween(label, "TextTransparency", 0, 0.4, Enum.EasingStyle.Sine)

        local toggle = InsertTheme(Create("Frame", frame, {
            Size = UDim2.new(0, 0, 0, 20),
            Position = UDim2.new(1, -10, 0.5, 0),
            AnchorPoint = Vector2.new(1, 0.5),
            BackgroundColor3 = Theme["Color Stroke"],
            BackgroundTransparency = 1
        }), "Stroke")
        Create("UICorner", toggle, {CornerRadius = UDim.new(0, 10)})
        Tween(toggle, "Size", UDim2.new(0, 40, 0, 20), 0.3, Enum.EasingStyle.Back)
        Tween(toggle, "BackgroundTransparency", 0.2, 0.3, Enum.EasingStyle.Sine)

        local indicator = InsertTheme(Create("Frame", toggle, {
            Size = default and UDim2.new(0, 18, 0, 18) or UDim2.new(0, 18, 0, 18),
            Position = default and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = default and Theme["Color Accent"] or Theme["Color SubText"],
            BackgroundTransparency = 1
        }), "Accent")
        Create("UICorner", indicator, {CornerRadius = UDim.new(0, 9)})
        Tween(indicator, "BackgroundTransparency", 0, 0.3, Enum.EasingStyle.Sine)

        local function update(state)
            if state then
                Tween(indicator, "Position", UDim2.new(1, -2, 0.5, 0), 0.2, Enum.EasingStyle.Quad)
                Tween(indicator, "BackgroundColor3", Theme["Color Accent"], 0.2, Enum.EasingStyle.Sine)
                Tween(toggle, "BackgroundTransparency", 0, 0.2)
            else
                Tween(indicator, "Position", UDim2.new(0, 2, 0.5, 0), 0.2, Enum.EasingStyle.Quad)
                Tween(indicator, "BackgroundColor3", Theme["Color SubText"], 0.2, Enum.EasingStyle.Sine)
                Tween(toggle, "BackgroundTransparency", 0.2, 0.2)
            end
            if flag then SetFlag(flag, state) end
            callback(state)
        end

        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                default = not default
                update(default)
                Tween(indicator, "Size", UDim2.new(0, 20, 0, 20), 0.1)
                Tween(indicator, "Size", UDim2.new(0, 18, 0, 18), 0.1)
            end
        end)

        update(default)
        return {Set = function(val) default = val update(val) end}
    end

    function tab:AddDropdown(config)
        local title = config.Name or "Dropdown"
        local options = config.Options or {}
        local default = config.Default or options[1]
        local flag = config.Flag
        local callback = config.Callback or function() end
        if flag and GetFlag(flag) then default = GetFlag(flag) end

        local frame = Create("Frame", tabContainer, {
            Size = UDim2.new(0, 0, 0, 40),
            BackgroundTransparency = 1
        })
        print("Adding dropdown: " .. title .. " to tab " .. tabName)
        Tween(frame, "Size", UDim2.new(1, 0, 0, 40), 0.4, Enum.EasingStyle.Back)

        local label = InsertTheme(Create("TextLabel", frame, {
            Size = UDim2.new(1, -120, 1, 0),
            Text = title,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            BackgroundTransparency = 1,
            TextTransparency = 1
        }), "Text")
        Tween(label, "TextTransparency", 0, 0.4, Enum.EasingStyle.Sine)

        local dropdown = InsertTheme(Create("TextButton", frame, {
            Size = UDim2.new(0, 0, 0, 30),
            Position = UDim2.new(1, -10, 0.5, 0),
            AnchorPoint = Vector2.new(1, 0.5),
            Text = tostring(default),
            Font = Enum.Font.GothamBold,
            TextSize = 12,
            BackgroundColor3 = Theme["Color Secondary"],
            BackgroundTransparency = 1,
            TextTransparency = 1,
            BorderSizePixel = 0
        }), "Frame")
        Create("UICorner", dropdown, {CornerRadius = UDim.new(0, 8)})
        Create("UIStroke", dropdown, {Color = Theme["Color Stroke"], Thickness = 1})
        Tween(dropdown, "Size", UDim2.new(0, 100, 0, 30), 0.3, Enum.EasingStyle.Back)
        Tween(dropdown, "BackgroundTransparency", 0.2, 0.3, Enum.EasingStyle.Sine)
        Tween(dropdown, "TextTransparency", 0, 0.3, Enum.EasingStyle.Sine)

        local dropFrame = Create("Frame", screenGui, {
            Size = UDim2.new(0, 100, 0, 0),
            Position = UDim2.new(0, dropdown.AbsolutePosition.X, 0, dropdown.AbsolutePosition.Y + 35),
            BackgroundColor3 = Theme["Color Secondary"],
            Visible = false,
            ClipsDescendants = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        })
        Create("UICorner", dropFrame, {CornerRadius = UDim.new(0, 8)})
        local shadow = InsertTheme(Create("Frame", dropFrame, {
            Size = UDim2.new(1, 8, 1, 8),
            Position = UDim2.new(0, 4, 0, 4),
            BackgroundColor3 = Theme["Color Shadow"],
            BackgroundTransparency = 0.6,
            ZIndex = -1
        }), "Shadow")
        Create("UICorner", shadow, {CornerRadius = UDim.new(0, 8)})
        local dropList = Create("ScrollingFrame", dropFrame, {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = Theme["Color Accent"],
            CanvasSize = UDim2.new(0, 0, 0, #options * 30),
            ScrollBarImageTransparency = 1
        })
        Create("UIListLayout", dropList, {Padding = UDim.new(0, 4)})
        Create("UIPadding", dropList, {PaddingTop = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5)})

        for i, option in pairs(options) do
            local optButton = InsertTheme(Create("TextButton", dropList, {
                Size = UDim2.new(0, 0, 0, 25),
                Text = tostring(option),
                Font = Enum.Font.GothamMedium,
                TextSize = 12,
                BackgroundColor3 = Theme["Color Secondary"],
                BackgroundTransparency = 1,
                TextTransparency = 1,
                BorderSizePixel = 0
            }), "Frame")
            Create("UICorner", optButton, {CornerRadius = UDim.new(0, 6)})
            Create("UIStroke", optButton, {Color = Theme["Color Stroke"], Thickness = 0.5})
            Tween(optButton, "Size", UDim2.new(1, -10, 0, 25), 0.3, Enum.EasingStyle.Back)
            Tween(optButton, "BackgroundTransparency", 0.4, 0.3 + i * 0.05, Enum.EasingStyle.Sine)
            Tween(optButton, "TextTransparency", 0, 0.3 + i * 0.05, Enum.EasingStyle.Sine)

            optButton.MouseButton1Click:Connect(function()
                default = option
                Tween(dropdown, "TextTransparency", 1, 0.2)
                dropdown.Text = tostring(option)
                Tween(dropdown, "TextTransparency", 0, 0.2)
                Tween(dropFrame, "Size", UDim2.new(0, 100, 0, 0), 0.3, Enum.EasingStyle.Quad)
                dropFrame.Visible = false
                if flag then SetFlag(flag, option) end
                callback(option)
            end)
            optButton.MouseEnter:Connect(function()
                Tween(optButton, "BackgroundTransparency", 0.2, 0.2)
                Tween(optButton, "TextColor3", Theme["Color Accent"], 0.2)
            end)
            optButton.MouseLeave:Connect(function()
                Tween(optButton, "BackgroundTransparency", 0.4, 0.2)
                Tween(optButton, "TextColor3", Theme["Color Text"], 0.2)
            end)
        end

        dropdown.MouseButton1Click:Connect(function()
            dropFrame.Visible = not dropFrame.Visible
            if dropFrame.Visible then
                Tween(dropFrame, "Size", UDim2.new(0, 100, 0, math.min(#options * 30, 120)), 0.3, Enum.EasingStyle.Back)
                Tween(dropFrame, "BackgroundTransparency", 0.2, 0.3, Enum.EasingStyle.Sine)
                Tween(dropList, "ScrollBarImageTransparency", 0.3, 0.3, Enum.EasingStyle.Sine)
                Tween(dropdown, "Rotation", 3, 0.1)
                Tween(dropdown, "Rotation", 0, 0.1)
            else
                Tween(dropFrame, "Size", UDim2.new(0, 100, 0, 0), 0.3, Enum.EasingStyle.Quad)
                Tween(dropFrame, "BackgroundTransparency", 1, 0.3, Enum.EasingStyle.Sine)
                Tween(dropList, "ScrollBarImageTransparency", 1, 0.3, Enum.EasingStyle.Sine)
            end
        end)

        return {Set = function(val)
            default = val
            Tween(dropdown, "TextTransparency", 1, 0.2)
            dropdown.Text = tostring(val)
            Tween(dropdown, "TextTransparency", 0, 0.2)
        end}
    end

    function tab:AddSlider(config)
        local title = config.Name or "Slider"
        local min = config.Min or 0
        local max = config.Max or 100
        local default = config.Default or min
        local flag = config.Flag
        local callback = config.Callback or function() end
        if flag and GetFlag(flag) then default = GetFlag(flag) end

        local frame = Create("Frame", tabContainer, {
            Size = UDim2.new(0, 0, 0, 50),
            BackgroundTransparency = 1
        })
        print("Adding slider: " .. title .. " to tab " .. tabName)
        Tween(frame, "Size", UDim2.new(1, 0, 0, 50), 0.4, Enum.EasingStyle.Back)

        local label = InsertTheme(Create("TextLabel", frame, {
            Size = UDim2.new(1, -50, 0, 20),
            Text = title,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            BackgroundTransparency = 1,
            TextTransparency = 1
        }), "Text")
        Tween(label, "TextTransparency", 0, 0.4, Enum.EasingStyle.Sine)

        local valueLabel = InsertTheme(Create("TextLabel", frame, {
            Size = UDim2.new(0, 0, 0, 20),
            Position = UDim2.new(1, -10, 0, 0),
            AnchorPoint = Vector2.new(1, 0),
            Text = tostring(default),
            Font = Enum.Font.GothamBold,
            TextSize = 12,
            BackgroundTransparency = 1,
            TextTransparency = 1
        }), "Text")
        Tween(valueLabel, "Size", UDim2.new(0, 40, 0, 20), 0.3, Enum.EasingStyle.Back)
        Tween(valueLabel, "TextTransparency", 0, 0.3, Enum.EasingStyle.Sine)

        local sliderBar = InsertTheme(Create("Frame", frame, {
            Size = UDim2.new(0, 0, 0, 4),
            Position = UDim2.new(0, 5, 0, 30),
            BackgroundColor3 = Theme["Color Stroke"],
            BackgroundTransparency = 1
        }), "Stroke")
        Create("UICorner", sliderBar, {CornerRadius = UDim.new(0, 2)})
        Tween(sliderBar, "Size", UDim2.new(1, -60, 0, 4), 0.4, Enum.EasingStyle.Back)
        Tween(sliderBar, "BackgroundTransparency", 0.3, 0.4, Enum.EasingStyle.Sine)

        local fill = InsertTheme(Create("Frame", sliderBar, {
            Size = UDim2.new((default - min) / (max - min), 0, 0, 0),
            BackgroundColor3 = Theme["Color Accent"],
            BackgroundTransparency = 1
        }), "Accent")
        Create("UICorner", fill, {CornerRadius = UDim.new(0, 2)})
        Tween(fill, "Size", UDim2.new((default - min) / (max - min), 0, 1, 0), 0.4, Enum.EasingStyle.Quad)
        Tween(fill, "BackgroundTransparency", 0, 0.4, Enum.EasingStyle.Sine)

        local knob = InsertTheme(Create("Frame", sliderBar, {
            Size = UDim2.new(0, 0, 0, 12),
            Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Theme["Color Accent"],
            BackgroundTransparency = 1
        }), "Accent")
        Create("UICorner", knob, {CornerRadius = UDim.new(0, 6)})
        Tween(knob, "Size", UDim2.new(0, 12, 0, 12), 0.3, Enum.EasingStyle.Back)
        Tween(knob, "BackgroundTransparency", 0, 0.3, Enum.EasingStyle.Sine)

        local dragging
        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                Tween(knob, "Size", UDim2.new(0, 14, 0, 14), 0.2, Enum.EasingStyle.Quad)
                Tween(sliderBar, "BackgroundTransparency", 0.1, 0.2)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local pos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                default = min + (max - min) * pos
                Tween(fill, "Size", UDim2.new(pos, 0, 1, 0), 0.1, Enum.EasingStyle.Sine)
                Tween(knob, "Position", UDim2.new(pos, 0, 0.5, 0), 0.1, Enum.EasingStyle.Sine)
                Tween(valueLabel, "TextTransparency", 1, 0.1)
                valueLabel.Text = math.floor(default)
                Tween(valueLabel, "TextTransparency", 0, 0.1)
                if flag then SetFlag(flag, default) end
                callback(default)
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
                Tween(knob, "Size", UDim2.new(0, 12, 0, 12), 0.2, Enum.EasingStyle.Quad)
                Tween(sliderBar, "BackgroundTransparency", 0.3, 0.2)
            end
        end)

        return {Set = function(val)
            default = math.clamp(val, min, max)
            Tween(fill, "Size", UDim2.new((default - min) / (max - min), 0, 1, 0), 0.3, Enum.EasingStyle.Quad)
            Tween(knob, "Position", UDim2.new((default - min) / (max - min), 0, 0.5, 0), 0.3, Enum.EasingStyle.Quad)
            Tween(valueLabel, "TextTransparency", 1, 0.2)
            valueLabel.Text = math.floor(default)
            Tween(valueLabel, "TextTransparency", 0, 0.2)
        end}
    end

    return tab
end
