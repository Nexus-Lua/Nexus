local NexusLib = {}
NexusLib.__index = NexusLib

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

-- Themes
local themes = {
    Primary = Color3.fromRGB(28, 28, 38),
    Secondary = Color3.fromRGB(45, 45, 60),
    Accent = Color3.fromRGB(85, 170, 255),
    Text = Color3.fromRGB(255, 255, 255)
}

-- Utility function
local function Create(className, properties)
    local instance = Instance.new(className)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

-- Window constructor
function NexusLib.new(title)
    local self = setmetatable({}, NexusLib)
    
    self.GUI = Create("ScreenGui", {
        Name = "NexusLib",
        Parent = game.CoreGui
    })
    
    self.Main = Create("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        BackgroundColor3 = themes.Primary,
        Parent = self.GUI
    })
    
    -- Add corner radius
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = self.Main
    })
    
    -- Create title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = themes.Secondary,
        Parent = self.Main
    })
    
    Create("TextLabel", {
        Text = title,
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = themes.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        Parent = self.TitleBar
    })
    
    -- Create container for sections
    self.Container = Create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        Parent = self.Main
    })
    
    Create("UIListLayout", {
        Padding = UDim.new(0, 10),
        Parent = self.Container
    })
    
    return self
end

-- Section constructor
function NexusLib:AddSection(title)
    local section = {}
    
    section.Frame = Create("Frame", {
        Name = title,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = themes.Secondary,
        Parent = self.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = section.Frame
    })
    
    Create("TextLabel", {
        Text = title,
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = themes.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamSemibold,
        Parent = section.Frame
    })
    
    local contentFrame = Create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = section.Frame
    })
    
    Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = contentFrame
    })
    
    section.ContentFrame = contentFrame
    
    -- Button constructor
    function section:AddButton(text, callback)
        local button = Create("TextButton", {
            Text = text,
            Size = UDim2.new(1, -20, 0, 30),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundColor3 = themes.Accent,
            TextColor3 = themes.Text,
            Font = Enum.Font.Gotham,
            Parent = self.ContentFrame
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = button
        })
        
        button.MouseButton1Click:Connect(callback)
        
        self.Frame.Size = UDim2.new(1, 0, 0, self.ContentFrame.AbsoluteSize.Y + 40)
        return button
    end
    
    -- Slider constructor
    function section:AddSlider(text, min, max, default, callback)
        local sliderFrame = Create("Frame", {
            Size = UDim2.new(1, -20, 0, 50),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Parent = self.ContentFrame
        })
        
        local label = Create("TextLabel", {
            Text = text,
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            TextColor3 = themes.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = sliderFrame
        })
        
        local sliderBG = Create("Frame", {
            Size = UDim2.new(1, 0, 0, 4),
            Position = UDim2.new(0, 0, 0.7, 0),
            BackgroundColor3 = themes.Secondary,
            Parent = sliderFrame
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = sliderBG
        })
        
        local fill = Create("Frame", {
            Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
            BackgroundColor3 = themes.Accent,
            Parent = sliderBG
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = fill
        })
        
        local value = default
        local dragging = false
        
        local function update(input)
            local pos = input.Position.X - sliderBG.AbsolutePosition.X
            local size = sliderBG.AbsoluteSize.X
            local percent = math.clamp(pos / size, 0, 1)
            value = min + (max - min) * percent
            fill.Size = UDim2.new(percent, 0, 1, 0)
            label.Text = text .. ": " .. math.floor(value)
            callback(value)
        end
        
        sliderBG.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                update(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                update(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        self.Frame.Size = UDim2.new(1, 0, 0, self.ContentFrame.AbsoluteSize.Y + 40)
        return sliderFrame
    end
    
    return section
end

return NexusLib
