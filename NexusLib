local NexusLib = {}
NexusLib.__index = NexusLib

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

-- Themes
local themes = {
    Primary = Color3.fromRGB(28, 28, 38),
    Secondary = Color3.fromRGB(45, 45, 60),
    Accent = Color3.fromRGB(85, 170, 255),
    Text = Color3.fromRGB(255, 255, 255)
}

-- Animation Settings
local ANIMATION_SETTINGS = {
    FadeDuration = 0.2,
    HoverIntensity = 0.1,
    ClickScale = 0.95,
    RippleColor = themes.Accent,
    TransitionType = "FadeScale"
}

-- Utility Functions
local function Create(className, properties)
    local instance = Instance.new(className)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function Animate(instance, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(
        duration or ANIMATION_SETTINGS.FadeDuration,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

local function CreateRipple(button, x, y)
    local ripple = Create("Frame", {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0, x - button.AbsolutePosition.X, 0, y - button.AbsolutePosition.Y),
        BackgroundColor3 = ANIMATION_SETTINGS.RippleColor,
        BackgroundTransparency = 0.6,
        Parent = button
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local targetSize = UDim2.new(2, 0, 2, 0)
    local targetPosition = UDim2.new(-0.5, x - button.AbsolutePosition.X, -0.5, y - button.AbsolutePosition.Y)
    
    Animate(ripple, {
        Size = targetSize,
        Position = targetPosition,
        BackgroundTransparency = 1
    }, 0.5)
    
    game:GetService("Debris"):AddItem(ripple, 0.5)
end

-- Window Constructor
function NexusLib.new(title)
    local self = setmetatable({}, NexusLib)
    
    self.GUI = Create("ScreenGui", {
        Name = "NexusLib",
        Parent = game.CoreGui
    })
    
    self.Main = Create("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        BackgroundColor3 = themes.Primary,
        BackgroundTransparency = 1,
        Parent = self.GUI
    })
    
    -- Entrance Animation
    Animate(self.Main, {
        BackgroundTransparency = 0,
        Position = UDim2.new(0.5, -250, 0.5, -200)
    }, 0.3, Enum.EasingStyle.Back)
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = self.Main
    })
    
    -- Title Bar with Gradient
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = themes.Secondary,
        Parent = self.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = self.TitleBar
    })
    
    local titleGradient = Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, themes.Secondary),
            ColorSequenceKeypoint.new(1, themes.Accent)
        }),
        Transparency = NumberSequence.new(0.8),
        Rotation = 45,
        Parent = self.TitleBar
    })
    
    Create("TextLabel", {
        Text = title,
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = themes.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        Parent = self.TitleBar
    })
    
    -- Container for Sections
    self.Container = Create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = themes.Accent,
        Parent = self.Main
    })
    
    Create("UIListLayout", {
        Padding = UDim.new(0, 10),
        Parent = self.Container
    })
    
    -- Close Button
    local closeButton = Create("TextButton", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 95, 95),
        Text = "",
        Parent = self.TitleBar
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = closeButton
    })
    
    closeButton.MouseButton1Click:Connect(function()
        Animate(self.Main, {
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, -250, 0.6, -200)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        wait(0.3)
        self.GUI:Destroy()
    end)
    
    return self
end

-- Section Constructor
function NexusLib:AddSection(title)
    local section = {}
    section.__index = section
    
    section.Frame = Create("Frame", {
        Name = title,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = themes.Secondary,
        BackgroundTransparency = 0.2,
        Parent = self.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = section.Frame
    })
    
    Create("TextLabel", {
        Text = title,
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = themes.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamSemibold,
        Parent = section.Frame
    })
    
    section.ContentFrame = Create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = section.Frame
    })
    
    local listLayout = Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = section.ContentFrame
    })
    
    -- Auto-size content frame
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        section.ContentFrame.Size = UDim2.new(1, 0, 0, listLayout.AbsoluteContentSize.Y)
        section.Frame.Size = UDim2.new(1, 0, 0, listLayout.AbsoluteContentSize.Y + 35)
    end)
    
    -- Button Constructor
    function section:AddButton(text, callback)
        local button = Create("TextButton", {
            Text = text,
            Size = UDim2.new(1, -20, 0, 30),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundColor3 = themes.Accent,
            TextColor3 = themes.Text,
            Font = Enum.Font.Gotham,
            Parent = self.ContentFrame,
            AutoButtonColor = false
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = button
        })
        
        -- Hover Animation
        button.MouseEnter:Connect(function()
            Animate(button, {
                BackgroundColor3 = Color3.new(
                    math.min(themes.Accent.R + 0.1, 1),
                    math.min(themes.Accent.G + 0.1, 1),
                    math.min(themes.Accent.B + 0.1, 1)
                )
            }, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            Animate(button, {
                BackgroundColor3 = themes.Accent
            }, 0.2)
        end)
        
        -- Click Animation
        button.MouseButton1Down:Connect(function()
            Animate(button, {
                Size = UDim2.new(1, -20, 0, 28)
            }, 0.1)
        end)
        
        button.MouseButton1Up:Connect(function()
            Animate(button, {
                Size = UDim2.new(1, -20, 0, 30)
            }, 0.1)
        end)
        
        -- Ripple Effect
        button.MouseButton1Down:Connect(function(x, y)
            CreateRipple(button, x, y)
        end)
        
        button.MouseButton1Click:Connect(callback)
        
        return button
    end
    
    -- Slider Constructor
    function section:AddSlider(text, min, max, default, callback)
        local sliderFrame = Create("Frame", {
            Size = UDim2.new(1, -20, 0, 50),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Parent = self.ContentFrame
        })
        
        local label = Create("TextLabel", {
            Text = text .. ": " .. default,
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            TextColor3 = themes.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = sliderFrame
        })
        
        local sliderBG = Create("Frame", {
            Size = UDim2.new(1, 0, 0, 4),
            Position = UDim2.new(0, 0, 0.7, 0),
            BackgroundColor3 = themes.Secondary,
            Parent = sliderFrame
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = sliderBG
        })
        
        local fill = Create("Frame", {
            Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
            BackgroundColor3 = themes.Accent,
            Parent = sliderBG
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = fill
        })
        
        local thumb = Create("Frame", {
            Size = UDim2.new(0, 12, 0, 12),
            Position = UDim2.new((default - min)/(max - min), -6, 0.5, -6),
            BackgroundColor3 = themes.Text,
            Parent = sliderBG
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = thumb
        })
        
        local value = default
        local dragging = false
        
        local function update(input)
            local pos = input.Position.X - sliderBG.AbsolutePosition.X
            local size = sliderBG.AbsoluteSize.X
            local percent = math.clamp(pos / size, 0, 1)
            value = min + (max - min) * percent
            
            Animate(fill, {
                Size = UDim2.new(percent, 0, 1, 0)
            }, 0.1)
            
            Animate(thumb, {
                Position = UDim2.new(percent, -6, 0.5, -6)
            }, 0.1)
            
            label.Text = text .. ": " .. math.floor(value)
            callback(value)
        end
        
        sliderBG.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                update(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                update(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        return sliderFrame
    end
    
    -- Toggle Constructor
    function section:AddToggle(text, default, callback)
        local toggleFrame = Create("Frame", {
            Size = UDim2.new(1, -20, 0, 30),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Parent = self.ContentFrame
        })
        
        local label = Create("TextLabel", {
            Text = text,
            Size = UDim2.new(1, -50, 1, 0),
            BackgroundTransparency = 1,
            TextColor3 = themes.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = toggleFrame
        })
        
        local toggle = Create("Frame", {
            Size = UDim2.new(0, 40, 0, 20),
            Position = UDim2.new(1, -40, 0.5, -10),
            BackgroundColor3 = default and themes.Accent or themes.Secondary,
            Parent = toggleFrame
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = toggle
        })
        
        local thumb = Create("Frame", {
            Size = UDim2.new(0, 16, 0, 16),
            Position = UDim2.new(default and 1 or 0, default and -18 or 2, 0.5, -8),
            BackgroundColor3 = themes.Text,
            Parent = toggle
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = thumb
        })
        
        local enabled = default
        
        toggleFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                enabled = not enabled
                
                Animate(toggle, {
                    BackgroundColor3 = enabled and themes.Accent or themes.Secondary
                }, 0.2)
                
                Animate(thumb, {
                    Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8)
                }, 0.2)
                
                callback(enabled)
            end
        end)
        
        return toggleFrame
    end
    
    return setmetatable(section, section)
end

return NexusLib
